generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Negocio {
  id           String    @id @default(uuid())
  nombre       String    @unique
  descripcion  String?
  createdAt    DateTime  @default(now())

  limitTime    DateTime
  userlimit    Int
  locallimit   Int
  productlimit Int       @default(0) // Límite de productos por plan

  usuarios     Usuario[]
  tiendas      Tienda[]
  categorias   Categoria[]
  productos    Producto[]
  proveedores  Proveedor[]
  roles        Rol[]
}

// Representa un local. Puede tener múltiples usuarios y productos asociados.
model Tienda {
  id              String            @id @default(uuid())
  nombre          String            // Removido @unique - ahora será único por negocio
  usuarios        UsuarioTienda[] // Relación con la tabla intermedia UsuarioTienda
  productos       ProductoTienda[] // Relación con los productos que vende el local
  ventas          Venta[] // Relación con las ventas realizadas en el local
  cierres         CierrePeriodo[]
  tipo            String            @default("tienda")
  
  // Relaciones inversas para MovimientoStock con nombres específicos
  movimientosOrigen MovimientoStock[] @relation("MovimientoStockOrigen")
  movimientosDestino MovimientoStock[] @relation("MovimientoStockDestino")

  // Destinos de transferencia para esta tienda
  transferDestinations TransferDestinations[]

  negocio         Negocio          @relation(fields: [negocioId], references: [id])
  negocioId       String              @default("")

  usuario         Usuario[]

  // Índice de unicidad compuesto: nombre único por negocio
  @@unique([nombre, negocioId])
}

// Representa un usuario que puede estar vinculado a múltiples tiendas.
model Usuario {
  id              String            @id @default(uuid())
  nombre          String
  usuario         String            @unique // Nombre de usuario único
  password        String
  rol             String?             // Aqui solo se registrará si el usuario es superadministrador con el rol SUPER_ADMIN

  //tiendas         UsuarioTienda[] // Relación con la tabla intermedia UsuarioTienda
  locales         UsuarioTienda[] // Relación con la tabla intermedia UsuarioTienda
  ventas          Venta[] // Un usuario puede realizar múltiples ventas
  MovimientoStock MovimientoStock[]

  negocio         Negocio           @relation(fields: [negocioId], references: [id])
  negocioId       String             @default("")

  //tiendaActual    Tienda?            @relation(fields: [tiendaActualId], references: [id])
  //tiendaActualId     String?

  localActual    Tienda?            @relation(fields: [localActualId], references: [id])
  localActualId     String?
}

// Tabla intermedia para manejar la relación muchos a muchos entre Usuario y Tienda.
model UsuarioTienda {
  id        String  @id @default(uuid())
  usuario   Usuario @relation(fields: [usuarioId], references: [id]) // Usuario asociado
  usuarioId String
  tienda    Tienda  @relation(fields: [tiendaId], references: [id]) // Tienda asociada
  tiendaId  String
  rol       Rol?    @relation(fields: [rolId], references: [id]) // Rol del usuario en esta tienda
  rolId     String?
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([usuarioId, tiendaId]) // Garantiza que un usuario no se duplique en una tienda
}

// Representa un rol que puede tener un usuario en una tienda específica
model Rol {
  id          String   @id @default(uuid())
  nombre      String   // Nombre del rol (ej: "Vendedor", "Administrador")
  descripcion String?  // Descripción opcional del rol
  permisos    String   // String con permisos separados por "|" (ej: "pos.vender|pos.cancelarventa")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  negocio     Negocio  @relation(fields: [negocioId], references: [id])
  negocioId   String

  // Relación con las asignaciones usuario-tienda
  usuariosTiendas UsuarioTienda[]

  // Índice de unicidad compuesto: nombre único por negocio
  @@unique([nombre, negocioId])
  @@index([negocioId])
}

// Representa una categoría de productos (ej. Electrónica, Ropa, etc.)
model Categoria {
  id        String     @id @default(uuid())
  nombre    String     // Removido @unique - ahora será único por negocio
  color     String // Color representativo (hexadecimal)
  productos Producto[] // Relación con los productos de esta categoría

  negocio   Negocio   @relation(fields: [negocioId], references: [id])
  negocioId String       @default("")

  // Índice de unicidad compuesto: nombre único por negocio
  @@unique([nombre, negocioId])
}

// Representa un producto genérico, sin relación con tiendas específicas.
model Producto {
  id              String           @id @default(uuid())
  nombre          String           // Removido @unique - ahora será único por negocio
  descripcion     String
    permiteDecimal  Boolean          @default(false) // Permite cantidades decimales en ventas y existencias
  permiteDecimal  Boolean          @default(false)
  categoria       Categoria        @relation(fields: [categoriaId], references: [id]) // Categoría a la que pertenece
  categoriaId     String
  productosTienda ProductoTienda[] // Relación con las tiendas donde se vende
  prodProveedoresLiquidacion ProductoProveedorLiquidacion[]
  
  // 🔗 Fracción: Este producto es una fracción de otro (ej: Cigarro Suelto -> Caja de Cigarro)
  fraccionDe       Producto?       @relation("ProductoFraccion", fields: [fraccionDeId], references: [id])
  fraccionDeId     String?         // ID del producto padre (opcional)
  fracciones       Producto[]      @relation("ProductoFraccion") // Productos que se derivan de este

  unidadesPorFraccion Int?         // Cuántas unidades se generan al fraccionar 1 del producto padre

  negocio         Negocio          @relation(fields: [negocioId], references: [id])
  negocioId       String            @default("")

  codigosProducto CodigoProducto[]

  // indice de unicidad compuesto: nombre único por negocio
  @@unique([nombre, negocioId])
}

model CodigoProducto {
  id        String   @id @default(uuid())
  codigo    String  @unique
  producto  Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId String
}

// Tabla intermedia para manejar la relación muchos a muchos entre Producto y Tienda.
model ProductoTienda {
  id          String            @id @default(uuid())
  tienda      Tienda            @relation(fields: [tiendaId], references: [id]) // Tienda donde se vende el producto
  tiendaId    String
  producto    Producto          @relation(fields: [productoId], references: [id]) // Producto asociado
  productoId  String
  costo       Float             @default(0) // Costo del producto en esa tienda
  precio      Float             @default(0) // Precio de venta en esa tienda específica
  existencia  Float             @default(0)   // Cantidad en stock en esa tienda (soporta decimales)
  ventas      VentaProducto[] // Relación con la tabla intermedia de ventas
  movimientos MovimientoStock[] // Relacion con la tabla de movimientos

  // Proveedor para productos en consignación (null para productos propios)
  proveedor   Proveedor? @relation(fields: [proveedorId], references: [id])
  proveedorId String?

  // Llave de unicidad compuesta: un producto por tienda y proveedor
  // Esto permite que el mismo producto tenga diferentes existencias por proveedor
  //@@unique([tiendaId, productoId, proveedorId])
}

// Representa una venta realizada en una tienda.
model Venta {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now()) // Fecha de creación
  productos     VentaProducto[] // Productos vendidos en esta venta
  total         Float // Monto total de la venta
  totalcash     Float // Monto total en efectivo
  totaltransfer Float // Monto en transferencia
  tienda        Tienda          @relation(fields: [tiendaId], references: [id]) // Tienda donde se realizó la venta
  tiendaId      String
  usuario       Usuario         @relation(fields: [usuarioId], references: [id])
  usuarioId     String
  syncId        String?         @default(uuid()) // Id generado en el front para evitar repetir ventas por fallos de sincronización          

  cierrePeriodo   CierrePeriodo? @relation(fields: [cierrePeriodoId], references: [id])
  cierrePeriodoId String?

  transferDestination TransferDestinations? @relation(fields: [transferDestinationId], references: [id])
  transferDestinationId String?

  // 🆕 NUEVOS CAMPOS PARA TRAZABILIDAD
  frontendCreatedAt DateTime? // Timestamp exacto cuando se creó la venta en el frontend
  wasOffline        Boolean   @default(false) // Si la venta se creó sin conexión
  syncAttempts      Int       @default(0) // Contador de intentos de sincronización
}

// Tabla intermedia para manejar la relación muchos a muchos entre Venta y ProductoTienda.
model VentaProducto {
  id               String         @id @default(uuid())
  venta            Venta          @relation(fields: [ventaId], references: [id]) // Venta asociada
  ventaId          String
  producto         ProductoTienda @relation(fields: [productoTiendaId], references: [id]) // Producto vendido
  productoTiendaId String
  cantidad         Float // Cantidad de productos vendidos en la transacción (soporta decimales)
  costo            Float          @default(0) // Costo al momento de la venta
  precio           Float          @default(0) // Precio al momento de la venta
}

// Representa un período de ventas cerrado con una fecha de inicio y una fecha de cierre.
model CierrePeriodo {
  id          String    @id @default(uuid())
  fechaInicio DateTime
  fechaFin    DateTime?
  tienda      Tienda    @relation(fields: [tiendaId], references: [id])
  tiendaId    String
  ventas      Venta[]

  // Campos denormalizados para resumen
  totalVentas         Float @default(0)
  totalGanancia       Float @default(0)
  totalInversion      Float @default(0)
  totalTransferencia  Float @default(0)

  // Nuevos campos para consignación
  totalVentasPropias         Float @default(0)
  totalVentasConsignacion    Float @default(0)
  totalGananciasPropias      Float @default(0)
  totalGananciasConsignacion Float @default(0)

  prodProveedoresLiquidacion ProductoProveedorLiquidacion[]

  // Idices
  @@index([fechaInicio])
  @@index([fechaFin])
  @@index([tiendaId])
}

model MovimientoStock {
  id               String         @id @default(uuid())
  productoTienda   ProductoTienda @relation(fields: [productoTiendaId], references: [id])
  productoTiendaId String

  tipo         MovimientoTipo // "ENTRADA" | "SALIDA" | "AJUSTE" | "VENTA"
  cantidad     Float // Positiva para entradas, negativa para salidas (soporta decimales)
  motivo       String? // Texto libre o tipos definidos (ajuste manual, error, etc.)
  referenciaId String? // Puede guardar el ID de una Venta, Entrada o Ajuste
  fecha        DateTime       @default(now())

  // Existencia del producto ANTES de aplicar este movimiento
  existenciaAnterior Float? // Null para movimientos existentes, valor para nuevos movimientos

  // 🆕 CAMPOS PARA CPP
  costoUnitario     Float? // Costo unitario de la compra (solo para COMPRA)
  costoTotal        Float? // Costo total de la compra (cantidad * costoUnitario)
  costoAnterior     Float? // Costo promedio ANTES de este movimiento
  costoNuevo        Float? // Costo promedio DESPUÉS de este movimiento (CPP calculado)

  usuario   Usuario? @relation(fields: [usuarioId], references: [id])
  usuarioId String?

  tienda   Tienda @relation("MovimientoStockOrigen", fields: [tiendaId], references: [id])
  tiendaId String

  // Proveedor para movimientos de consignación
  proveedor   Proveedor? @relation(fields: [proveedorId], references: [id])
  proveedorId String?

  destination Tienda? @relation("MovimientoStockDestino", fields: [destinationId], references: [id])
  destinationId String?

  state MovimientoState @default(APROBADO)

  @@index([productoTiendaId])
  @@index([fecha])
}

// Representa un proveedor del negocio
model Proveedor {
  id          String   @id @default(uuid())
  nombre      String   // Nombre del proveedor (obligatorio)
  descripcion String?  // Descripción del proveedor (opcional)
  direccion   String?  // Dirección del proveedor (opcional)
  telefono    String?  // Teléfono del proveedor (opcional)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  negocio     Negocio  @relation(fields: [negocioId], references: [id])
  negocioId   String

  // Relación con movimientos de consignación
  movimientos MovimientoStock[]
  
  // Relación con productos en consignación
  productosConsignacion ProductoTienda[]

  prodProveedorLiquidacion ProductoProveedorLiquidacion[]

  // Índice de unicidad compuesto: nombre único por negocio
  @@unique([nombre, negocioId])
  @@index([nombre])
}

// Representa los destinos de transferencia para cada tienda
model TransferDestinations {
  id          String   @id @default(uuid())
  nombre      String   // Nombre del destino de transferencia
  descripcion String?  // Descripción del destino (opcional)
  default     Boolean  @default(false) // Indica si es el destino por defecto
  tienda      Tienda   @relation(fields: [tiendaId], references: [id])
  tiendaId    String

  // Relación con las ventas que usan este destino
  ventas      Venta[]

  // Índice de unicidad compuesto: nombre único por tienda
  @@unique([nombre, tiendaId])
  @@index([tiendaId])
}

model ProductoProveedorLiquidacion {
  id               String           @id @default(uuid())
  monto            Float            @default(0)
  vendidos         Float            @default(0)
  costo            Float            @default(0)
  precio           Float            @default(0)
  existencia       Float            @default(0)

  createdAt        DateTime         @default(now()) 
  liquidatedAt     DateTime?
  
  cierre      CierrePeriodo @relation(fields: [cierreId], references: [id])
  cierreId    String

  proveedor   Proveedor  @relation(fields: [proveedorId], references: [id])
  proveedorId String

  producto  Producto @relation(fields: [productoId], references: [id])
  productoId String

  @@unique([cierreId, proveedorId, productoId])
}

enum MovimientoTipo {
  COMPRA
  VENTA
  TRASPASO_ENTRADA
  TRASPASO_SALIDA
  AJUSTE_SALIDA
  AJUSTE_ENTRADA
  DESAGREGACION_BAJA
  DESAGREGACION_ALTA
  CONSIGNACION_ENTRADA
  CONSIGNACION_DEVOLUCION
}

enum MovimientoState {
  PENDIENTE
  APROBADO
}