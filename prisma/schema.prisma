generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Representa un local. Puede tener múltiples usuarios y productos asociados.
model Tienda {
  id         String           @id @default(uuid())
  nombre     String           @unique // Nombre único del local
  usuarios   UsuarioTienda[]  // Relación con la tabla intermedia UsuarioTienda
  productos  ProductoTienda[] // Relación con los productos que vende el local
  ventas     Venta[]          // Relación con las ventas realizadas en el local
  cierres    CierrePeriodo[]
  tipo       String           @default("tienda")
}

// Representa un usuario que puede estar vinculado a múltiples tiendas.
model Usuario {
  id         String           @id @default(uuid())
  nombre     String
  usuario    String           @unique // Nombre de usuario único
  password   String
  rol        String           @default("vendedor") // Rol del usuario en el sistema
  tiendas    UsuarioTienda[]  // Relación con la tabla intermedia UsuarioTienda
  ventas     Venta[]          // Un usuario puede realizar múltiples ventas
}

// Tabla intermedia para manejar la relación muchos a muchos entre Usuario y Tienda.
model UsuarioTienda {
  id        String  @id @default(uuid())
  usuario   Usuario @relation(fields: [usuarioId], references: [id]) // Usuario asociado
  usuarioId String
  tienda    Tienda  @relation(fields: [tiendaId], references: [id])  // Tienda asociada
  tiendaId  String

  @@unique([usuarioId, tiendaId]) // Garantiza que un usuario no se duplique en una tienda
}

// Representa una categoría de productos (ej. Electrónica, Ropa, etc.)
model Categoria {
  id        String     @id @default(uuid())
  nombre    String     @unique // Nombre único de la categoría
  color     String     // Color representativo (hexadecimal)
  productos Producto[] // Relación con los productos de esta categoría
}

// Representa un producto genérico, sin relación con tiendas específicas.
model Producto {
  id              String           @id @default(uuid())
  nombre          String           @unique // Nombre único del producto
  descripcion     String
  categoria       Categoria        @relation(fields: [categoriaId], references: [id]) // Categoría a la que pertenece
  categoriaId     String
  productosTienda ProductoTienda[] // Relación con las tiendas donde se vende
}

// Tabla intermedia para manejar la relación muchos a muchos entre Producto y Tienda.
model ProductoTienda {
  id         String          @id @default(uuid())
  tienda     Tienda          @relation(fields: [tiendaId], references: [id]) // Tienda donde se vende el producto
  tiendaId   String
  producto   Producto        @relation(fields: [productoId], references: [id]) // Producto asociado
  productoId String
  costo      Float           // Costo del producto en esa tienda
  precio     Float           // Precio de venta en esa tienda específica
  existencia Int             // Cantidad en stock en esa tienda
  ventas     VentaProducto[] // Relación con la tabla intermedia de ventas

  @@unique([tiendaId, productoId]) // Agrega esta línea
}

// Representa una venta realizada en una tienda.
model Venta {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now()) // Fecha de creación
  productos        VentaProducto[] // Productos vendidos en esta venta
  total            Float           // Monto total de la venta
  totalcash        Float           // Monto total en efectivo
  totaltransfer    Float           // Monto en transferencia
  tienda           Tienda          @relation(fields: [tiendaId], references: [id]) // Tienda donde se realizó la venta
  tiendaId         String
  usuario          Usuario        @relation(fields: [usuarioId], references: [id])
  usuarioId        String
  
  cierrePeriodo    CierrePeriodo? @relation(fields: [cierrePeriodoId], references: [id])
  cierrePeriodoId  String?
}

// Tabla intermedia para manejar la relación muchos a muchos entre Venta y ProductoTienda.
model VentaProducto {
  id               String         @id @default(uuid())
  venta            Venta          @relation(fields: [ventaId], references: [id]) // Venta asociada
  ventaId          String
  producto         ProductoTienda @relation(fields: [productoTiendaId], references: [id]) // Producto vendido
  productoTiendaId String
  cantidad         Int            // Cantidad de productos vendidos en la transacción
}

// Representa un período de ventas cerrado con una fecha de inicio y una fecha de cierre.
model CierrePeriodo {
  id          String    @id @default(uuid())
  fechaInicio DateTime
  fechaFin    DateTime?
  tienda      Tienda    @relation(fields: [tiendaId], references: [id])
  tiendaId    String
  ventas      Venta[]

  // Campos denormalizados para resumen
  totalVentas    Float     @default(0)
  totalGanancia  Float     @default(0)
  totalInversion Float     @default(0)

  // Idices
  @@index([fechaInicio])
  @@index([fechaFin])
  @@index([tiendaId])
}